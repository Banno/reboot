Bargaining with promises
------------------------

Applying a promise is like taking a hostage. Your demands might be met
in time, but until they are you're sitting around doing nothing other
than guarding a prisoner.

So we don't like to take hostages or apply promises, but what good is
a promise if you can't do anything with its value? Luckily, you can do
plenty. You just have to be flexible about when things happen.

### Transformations

A promise is like an option that doesn't know what it is yet; that
doesn't stop it from promising to transform into something else. We
could map an option of a string into an option of its length. Same
goes for promises.

```scala
import dispatch._
val doc = Http(host("ls.implicit.ly") OK as.String)
val length = for (d <- doc) yield d.length
```

The `length` value is a promise of integer.

### Promise#toString

If you pasted the above into a console, you probably saw this in the
output:

    doc: dispatch.Promise[String] = Promise(-incomplete-)
    length: dispatch.Promise[Int] = Promise(-incomplete-)

The two promises, which depend on the same network operation, do not
complete before the console asks them to print themselves. But if you
try a moment or two later, you'll see that promises print their values
similar to the option subtype *some*.

    scala> length
    length: dispatch.Promise[Int] = Promise(3892)

`Promise.toString` represents the value if it's available.

### Promise#completeOption

How does `toString` work on unknown values? It uses an option. You can
use the same technique to access the integer value, *if it's
available*.

```scala
val lengthNow = length.completeOption.getOrElse(-1)
```

But most of the time, you want to operate on values that are known to
be available. In the next pages we'll see how far we can go by
transforming promises.
