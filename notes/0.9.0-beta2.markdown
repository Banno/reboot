This release includes convenience methods for working with streaming
APIs as well as a package-refactoring of handlers in general.

### Stream Consumption

Classes in the package `reboot.stream` provide basic support for
working with textual chunked HTTP streams. These can be combined and
build upon to flexibly create `AsyncHandler` instances.

A higher level interface, `reboot.as.stream.Lines` provides
functionality similar to the `^--` verb in Dispatch 0.8.x, which
invokes a callback function for every line of text received.

    import reboot._
    val printer = as.stream.Lines(println)
    Http(host("stream.meetup.com") / "2" / "rsvps" > printer)
    // enjoy the output...
    printer.stop()

### Handler Package Re-org

Previously we had basic handler builders in the object `reboot.As`,
which looked like this:

    val str = Http(url("http://example.com/") > As.string)

But it didn't allow for simple extension, since nothing external could
be nested in `reboot.As`. When non-core Dispatch modules want to add
handlers, where should they go? It was evident in the oauth interface
that we didn't have a good answer.

The solution is simple enough. Instead of a `reboot.As` object, we
have a `reboot.as` package. The handler builders that were methods
of that object are now function-objects in the package.

For example, `As.string` becomes `as.String`. What might look like a
persnickety capitalization change is in fact an important functional
change, which allows us to extend the library logically and while
following conventions. For the basic oauth handler is now
`as.oauth.Token`, since you've already got `reboot._` in scope. And
the stream handler describe above has of course already adapted.

The `As._` builders are now deprecated, with messages directing you to
their new and improved names.
